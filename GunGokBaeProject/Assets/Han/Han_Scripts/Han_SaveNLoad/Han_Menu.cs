using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class Han_Menu : MonoBehaviour
{
    private static Han_Menu instance_Han_Menu = null;
    void Awake()
    {
        if (null == instance_Han_Menu)
        {
            //이 클래스 인스턴스가 탄생했을 때 전역변수 instance에 게임매니저 인스턴스가 담겨있지 않다면, 자신을 넣어준다.
            instance_Han_Menu = this;
            //씬 전환이 되더라도 파괴되지 않게 한다.            //gameObject만으로도 이 스크립트가 컴포넌트로서 붙어있는 Hierarchy상의 게임오브젝트라는 뜻이지만, 헷갈림 방지를 위해 this를 붙여주기도 한다.
            DontDestroyOnLoad(this.gameObject);
        }
        else
        {
            //만약 씬 이동이 되었는데 그 씬에도 Hierarchy에 GameMgr이 존재할 수도 있다.
            //그럴 경우엔 이전 씬에서 사용하던 인스턴스를 계속 사용해주는 경우가 많은 것 같다.
            //그래서 이미 전역변수인 instance에 인스턴스가 존재한다면 자신(새로운 씬의 GameMgr)을 삭제해준다.
            Destroy(this.gameObject);
        }
    }

    [SerializeField]
    private Han_SaveNLoad_DB theSaveNLoadDB;
    [SerializeField]
    private Han_SaveNLoad_Json_Server theSaveNLoadJson;
    
    // Start is called before the first frame update
    public void SaveDBBtn()
    {
        Debug.Log("ClickSave");
        theSaveNLoadDB.SaveData();
    }
    public void SaveServerBtn()
    {
        Debug.Log("ClickSave");
        theSaveNLoadJson.SaveData();
    }

    public void ExitBtn()
    {
        Debug.Log("게임종료");
        Application.Quit();
    }

    public void LoadBtn()
    {
        StartCoroutine(LoadCoroutine());
        Debug.Log("데이터 로드");
    }

    IEnumerator LoadCoroutine()
    {
        //SceneManager.LoadScene(sceneName); //게임 씬으로 이동 후 데이터를 넣어줘야 하기 때문에
/*        
 *      AsyncOperation operation = SceneManager.LoadSceneAsync(sceneName); //동기화, 씬의 모든것이 로딩될때까지
        while (!operation.isDone)   //기다리기, 프래임단위로 검색
        {
            yield return null;
        }
*/
        //theSaveNLoad = FindObjectOfType<Han_SaveNLoad>(); 다시 불러오기
        //theSaveNLoad.LoadData();
        Destroy(gameObject);
        yield return null; //나중에 지울것

    }
}
